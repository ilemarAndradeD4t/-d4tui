generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model GasStation {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId()
  name              String
  rif               String
  social_reason     String
  type              GasStationType
  location          GasStationLocation?
  contacts          GasStationContact[]
  attributes        GasStationAttributes?
  modality          GasStationModality
  state             GasStationState
  images            String[]
  provider_services Hydrocarbon[]
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
}

enum GasStationState {
  OPERATIVE
  SUSPENDED
  INOPERATIVE
  CLOSED
  UNDER_MAINTENANCE
}

enum GasStationModality {
  INTEGRAL         @map("integral")
  INTERNATIONAL    @map("internacional")
  SUBSIDIZED       @map("subsidiada")
  PUBLIC_TRANSPORT @map("tranporte_publico")
}

model GasStationAttributes {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId()
  tanks          Tanks[]
  pump_islands   PumpIsland[]
  meters         Meters[]
  gas_station_id String       @unique @db.ObjectId
  gas_station    GasStation   @relation(fields: [gas_station_id], references: [id])
}

model PumpIsland {
  id                        String                @id @default(auto()) @map("_id") @db.ObjectId()
  dispensers                PumpIslandDispenser[]
  gas_station_attributes_id String                @db.ObjectId
  gas_station_attributes    GasStationAttributes  @relation(fields: [gas_station_attributes_id], references: [id])
}

model PumpIslandDispenser {
  id             String                    @id @default(auto()) @map("_id") @db.ObjectId()
  model          PumpIslandDispenserModel?
  damaged_beak   Int
  pump_island_id String                    @db.ObjectId
  pump_island    PumpIsland                @relation(fields: [pump_island_id], references: [id])
  brand          PumpIslandDispenserBrand?
  serial         String
}

model PumpIslandDispenserBrand {
  id                       String              @id @default(auto()) @map("_id") @db.ObjectId()
  name                     String
  description              String
  image                    String
  pump_island_dispenser_id String              @unique @db.ObjectId
  pump_island_dispenser    PumpIslandDispenser @relation(fields: [pump_island_dispenser_id], references: [id])
}

model PumpIslandDispenserModel {
  id                       String              @id @default(auto()) @map("_id") @db.ObjectId()
  name                     String
  description              String
  beaks_count              Int
  image                    String
  pump_island_dispenser_id String              @unique @db.ObjectId
  pump_island_dispenser    PumpIslandDispenser @relation(fields: [pump_island_dispenser_id], references: [id])
}

model Tanks {
  id                        String               @id @default(auto()) @map("_id") @db.ObjectId()
  capacity                  Int
  measurement_unit          MesurementUnit
  hydrocarbon               Hydrocarbon
  gas_station_attributes_id String               @db.ObjectId
  gas_station_attributes    GasStationAttributes @relation(fields: [gas_station_attributes_id], references: [id])
  state                     TanksState
}

enum TanksState {
  DAMAGED            @map("dañado")
  UNDER_CONSTRUCTION @map("en_construcción")
  OPERATIVE          @map("operativo")
  INOPERATIVE        @map("inoperative")
  UNDER_MAINTENANCE  @map("en_mantenimiento")
}

enum MesurementUnit {
  VOLUME @map("volumen")
  LITER  @map("litro")
  WEIGHT @map("peso")
}

enum Hydrocarbon {
  GASOLINE @map("gasolina")
  DIESEL   @map("diesel")
  GAS      @map("gas")
}

model GasStationContact {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId()
  name                 String
  identity_card_number String
  gas_station_ids      String     @db.ObjectId
  gas_station          GasStation @relation(fields: [gas_station_ids], references: [id])
}

enum GasStationType {
  STOCKAGE @map("almacenamiento")
  PUMP     @map("surtidor")
}

model GasStationLocation {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId()
  address        String
  coords         GasStationCoords?
  city           String
  state          String
  gas_station_id String            @unique @db.ObjectId()
  gas_station    GasStation        @relation(fields: [gas_station_id], references: [id])
}

model City {
  id   String @id @default(auto()) @map("_id") @db.ObjectId()
  name String
}

model State {
  id   String @id @default(auto()) @map("_id") @db.ObjectId()
  name String
}

model GasStationCoords {
  id                      String             @id @default(auto()) @map("_id") @db.ObjectId()
  latitude                String
  longitud                String
  gas_station_location_id String             @unique @db.ObjectId
  gas_station_location    GasStationLocation @relation(fields: [gas_station_location_id], references: [id])
}
